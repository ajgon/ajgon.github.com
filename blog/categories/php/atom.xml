<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: PHP | Igor Rzegocki Personal Homepage]]></title>
  <link href="http://www.rzegocki.pl/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://www.rzegocki.pl/"/>
  <updated>2015-05-04T20:04:46+02:00</updated>
  <id>http://www.rzegocki.pl/</id>
  <author>
    <name><![CDATA[Igor Rzegocki]]></name>
    <email><![CDATA[igor@rzegocki.pl]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting development environment on your Mac]]></title>
    <link href="http://www.rzegocki.pl/blog/2012/09/22/setting-development-environment-on-your-mac/"/>
    <updated>2012-09-22T12:33:00+02:00</updated>
    <id>http://www.rzegocki.pl/blog/2012/09/22/setting-development-environment-on-your-mac</id>
    <content type="html"><![CDATA[<p>Recently I bought an
<a href="http://www.anandtech.com/show/4253/the-crucial-m4-micron-c400-ssd-review">awesome piece of hardware</a>
to my MacBook Pro. Unfortunatelly
<a href="http://www.ifixit.com/Guide/Installing-MacBook-Pro-13-Inch-Unibody-Early-2011-Hard-Drive-Replacement/5119/1">to install it</a>,
I had to remove my old HDD and all system files with it as well. So for that
occasion I made myself double gift (Christmas are earlier this year ;)) and
also bought a <a href="http://www.apple.com/osx/">new OS</a>. After smooth installation,
<a href="http://blog.alutam.com/2012/04/01/optimizing-macos-x-lion-for-ssd/">some tweaks</a>
and <a href="http://mobilityupdate.com/mac/crucal-m4-macbook-pro-2011/">huge performance boost</a>
I started setting my developer environment once again &ndash; nice and clean.</p>

<!--more-->


<h2>Installing developer &ldquo;must-have&rdquo; applications</h2>

<p>Firstly, two most important things are a terminal emulator &ndash; in my case, it is
<a href="http://www.iterm2.com/#/section/home">iTerm2</a>, and
<a href="https://developer.apple.com/technologies/tools/">XCode</a> with
<a href="http://stackoverflow.com/questions/9329243/xcode-4-4-command-line-tools">command line tools</a>.
Next thing is of course package manager. After alot of nasty fighting and bad
experiences with <a href="http://www.macports.org/">macports</a> I switched to
<a href="http://mxcl.github.com/homebrew/">Homebrew</a> and I love it. To install it,
simply type:</p>

<p>{% codeblock As user lang:sh %}
ruby &lt;(curl -fsSkL raw.github.com/mxcl/homebrew/go)
{% endcodeblock %}</p>

<p>After installing it, i suggest to type <code>brew doctor</code> and follow the
instructions if something unexpected occurs. However, in clean
Mountain Lion+XCode+command line tools installation I didn&rsquo;t get any warnings,
so you shouldn&rsquo;t as well.</p>

<p>Next important thing is <a href="http://git-scm.com/">git</a>. Even if you don&rsquo;t plan to
use it (but I strongly recommend this tool), install it, because a lot of
software depends on it these days. Especially if you are a Ruby developer.
So just type:</p>

<p>{% codeblock As user lang:sh %}
brew install git
{% endcodeblock %}</p>

<p>and you&rsquo;re set. Another thing, which I really like is
<a href="http://www.zsh.org/">Z Shell</a> with it&rsquo;s excellent extension
<a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a>. Words can&rsquo;t describe
how awesome it is, so watch
<a href="https://www.youtube.com/watch?v=m07MiM6rmMc">this video</a>, and then type:</p>

<p>{% codeblock As user lang:sh %}
curl -L <a href="https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh">https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh</a> | sh
{% endcodeblock %}</p>

<h2>Installing dnsmasq and nginx</h2>

<p>The next step is installing <a href="http://nginx.org/">nginx</a>, which is a great
alternative to <a href="http://www.apache.org/">apache</a>.</p>

<p>{% codeblock As user lang:sh %}
brew install nginx
sudo ln -s /usr/local/etc/nginx /etc/nginx
{% endcodeblock %}</p>

<p>As for configuration, take look at my
<a href="https://github.com/ajgon/DeeDee/tree/master/etc/nginx">DeeDee project nginx configuration files</a>
&ndash; they are really good starting point for configuring your nginx. However, if
you are lazy, just take and copy <code>wordpress</code> and <code>php</code> files from <code>extra/lang</code>
directory (on DeeDee github) to <code>/usr/local/etc/nginx</code> (this is where your
nginx configuration files lives) and add following section at the bottom
(before the last closing bracket) of the <code>nginx.conf</code> file:</p>

<p>{% codeblock /usr/local/etc/nginx/nginx.conf lang:sh %}
server {</p>

<pre><code>server_name ~^(www.)?(?&lt;project&gt;[^.]+).php.dev;
# This is the path, where your projects lives.
# $project is domain part but as well directory.
# So something.php.dev will take files from /Users/yourname/Projects/something/public
root /Users/yourname/Projects/$project/public;
error_log logs/php.dev.error_log info;
index index.html index.php;
include php;
</code></pre>

<p>}</p>

<p>server {</p>

<pre><code>server_name ~^(www.)?(?&lt;project&gt;[^.]+).wp.dev;
# This is the path, where your projects lives.
# $project is domain part but as well directory.
# So something.wp.dev will take files from /Users/yourname/Projects/something/public
root /Users/yourname/Projects/$project/public;
error_log logs/wp.dev.error_log info;
index index.html index.php;
include php;
include wordpress;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>Now type <code>sudo /usr/local/sbin/nginx -t</code> &ndash; if eveyrhing is okay, you should see
a proper message.</p>

<p>Next thing we need to do is to make those wp.dev and php.dev domains work. To
do this, install <a href="http://www.thekelleys.org.uk/dnsmasq/doc.html">dnsmasq</a>:</p>

<p>{% codeblock As user lang:sh %}
brew install dnsmasq
cp $(brew &mdash;prefix dnsmasq)/dnsmasq.conf.example /usr/local/etc/dnsmasq.conf
sudo cp $(brew &mdash;prefix dnsmasq)/homebrew.mxcl.dnsmasq.plist /Library/LaunchDaemons
{% endcodeblock %}</p>

<p>Now edit newly created <code>dnsmasq.conf</code> file and add:
{% codeblock /usr/local/etc/dnsmasq.conf lang:sh %}
address=/.dev/127.0.0.1
{% endcodeblock %}</p>

<p>Last thing left, is setting a nameserver to 127.0.0.1 in your Network prefpane,
as shown below.</p>

<p><img src="/images/upload/dnsmasq.png" alt="dnsmasq configuration" /></p>

<p>From now on all *.dev domains will be translated to <code>127.0.0.1</code> and from there
all <code>wp.dev</code> and <code>php.dev</code> domains will be handled by nginx. Good stuff.</p>

<h2>Installing PHP-FPM and MySQL</h2>

<p>Unlike apache, nginx doesn&rsquo;t have a native PHP module, so we have to help
ourselves with FastCGI extension. Thankfully there is a great wrapper for
PHPcgi called PHP-FPM. Not only it sets all the hard work for us, but it also
watches PHP for unexpected crashes (well.. yeah, it&rsquo;s PHP after all) and
restarts it immediately &ndash; so it saves our time. Unfortunately, brew doesn&rsquo;t
contain PHP recipes out of box, so we need
<a href="https://github.com/josegonzalez/homebrew-php">a little help</a>. To install PHP:</p>

<p>{% codeblock As user lang:sh %}
brew tap homebrew/dupes
brew tap josegonzalez/homebrew-php
brew install php54 &mdash;with-mysql &mdash;with-fpm &mdash;with-intl # you can add &mdash;with-pgsql if you are using it
{% endcodeblock %}</p>

<p>Installing MySQL is a little bit complicated:</p>

<p>{% codeblock As user lang:sh %}
brew install mysql
unset TMPDIR
mysql_install_db &mdash;verbose &mdash;user=<code>whoami</code> &mdash;basedir=&ldquo;$(brew &mdash;prefix mysql)&rdquo; &mdash;datadir=/usr/local/var/mysql &mdash;tmpdir=/tmp
mysql.server start
/usr/local/opt/mysql/bin/mysqladmin -u root password &lsquo;&rsquo;
/usr/local/opt/mysql/bin/mysqladmin -u root -h localhost password &lsquo;&rsquo;
{% endcodeblock %}</p>

<h2>Putting everything together</h2>

<p>As you may noticed, all this stuff won&rsquo;t start automatically. I think it&rsquo;s a
good approach, because when I use my mac for normal stuff, I don&rsquo;t want any
unnecessary resources consumed. So to tie all of this together, I have a simple
script which will launch or disable all the services on demand. Just create
(and make executable) <code>/usr/local/bin/dev&lt;</code> file with following contents:</p>

<p>{% codeblock /usr/local/bin/dev lang:sh %}</p>

<h1>!/bin/bash</h1>

<p>if [$# -lt 1 ]; then</p>

<pre><code>echo "Usage: $0 on|off"
</code></pre>

<p>else</p>

<pre><code>if [ $1 = 'on' ]; then
    $(brew --prefix php54)/sbin/php-fpm --fpm-config /usr/local/etc/php/5.4/php-fpm.conf 2&gt; /dev/null &amp;
    sudo /usr/local/sbin/nginx
    mysql.server start &gt; /dev/null
else
    killall php-fpm 2&gt; /dev/null
    sudo killall nginx 2&gt; /dev/null
    mysql.server stop 2&gt; /dev/null
fi
</code></pre>

<p>fi
{% endcodeblock %}</p>

<p>Now when you need to enter &ldquo;development mode&rdquo; simply type <code>dev on</code> and to quit
<code>dev off</code>.</p>

<h2>Conclusion</h2>

<p>Well, that&rsquo;s all! I hope you will enjoy this simple environment as much as
I do :).</p>
]]></content>
  </entry>
  
</feed>
